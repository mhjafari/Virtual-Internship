#import all the necessary libraries
import numpy as np
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Activation, Dense, Flatten, BatchNormalization, Conv2D, MaxPool2D
from tensorflow.keras.optimizers import Adam    #default optimizer for keras 
from tensorflow.keras.metrics import categorical_crossentropy
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import itertools
import os                                   #for path directory
import matplotlib.pyplot as plt             #for plotting the results


# Downloads the vgg16 model 
vgg16_model = tf.keras.applications.vgg16.VGG16()

#defined the path of my training data here in relation to jupyter notebook
train_path = r'C:\Users\sulai\VIRTUAL INTERNSHIP\other projects\dogs-vs-cats\train'
valid_path = r'C:\Users\sulai\VIRTUAL INTERNSHIP\other projects\dogs-vs-cats\valid'
test_path = r'C:\Users\sulai\VIRTUAL INTERNSHIP\other projects\dogs-vs-cats\test'


#vgg16 is trained on 224*224 size of images and the data has to be reduced to 224 x 224 for functionality
train_batches = ImageDataGenerator(preprocessing_function=tf.keras.applications.vgg16.preprocess_input) \
    .flow_from_directory(directory=train_path, target_size=(224,224), classes=['cat', 'dog'], batch_size=10)

valid_batches = ImageDataGenerator(preprocessing_function=tf.keras.applications.vgg16.preprocess_input) \
    .flow_from_directory(directory=valid_path, target_size=(224,224), classes=['cat', 'dog'], batch_size=10)

test_batches = ImageDataGenerator(preprocessing_function=tf.keras.applications.vgg16.preprocess_input) \
    .flow_from_directory(directory=test_path, target_size=(224,224), classes=['cat', 'dog'], batch_size=10, shuffle=False)
    
    model = Sequential()
for layer in vgg16_model.layers[:-1]:
    model.add(layer)
    
    
    for layer in model.layers:
    layer.trainable = False     # freezes the trainable parameters and biases of the model
    
    
    model.add(Dense(units=2, activation='softmax')) #in this case the output layer will classify 2 categories
    
    
    model.compile(optimizer=Adam(learning_rate=0.0001), loss='categorical_crossentropy', metrics=['accuracy'])
    
    
    model.fit(x=train_batches, validation_data=valid_batches, epochs=5, verbose=2)
    
    
    predictions = model.predict(x=test_batches, steps= len(test_batches), verbose=0)
test_batches.classes

